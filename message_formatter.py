import json
import logging
from parser_vivino import parse_wine


def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram MarkdownV2."""
    if not isinstance(text, str):
        text = str(text)

    to_escape = r'\_*[]()~`>#+-=|{}.!'
    for char in to_escape:
        text = text.replace(char, f'\\{char}')
    return text


def format_wine_markdown(data):
    if not data or not isinstance(data, dict) or all(not v for v in data.values()):
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–∏–Ω—É."

    lines = []

    name = data.get("Name")
    if name:
        lines.append(f"*üç∑ {escape_markdown(name)}*")

    brand = data.get("Brand")
    if brand:
        lines.append(f"*–ë—Ä–µ–Ω–¥:* {escape_markdown(brand)}")

    wine_type = data.get("Type")
    if wine_type:
        lines.append(f"*–¢–∏–ø –≤–∏–Ω–∞:* {escape_markdown(wine_type)}")

    rating = data.get("Rating")
    if rating:
        lines.append(f"*‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥:* {escape_markdown(rating)}/5")

    basic_info = data.get("Basic Info", {})
    if basic_info:
        lines.append("\n*üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n")
        for key, value in basic_info.items():
            if key == "–°–æ—Ä—Ç –≤–∏–Ω–æ–≥—Ä–∞–¥–∞" and isinstance(value, list):
                lines.append(f"*–°–æ—Ä—Ç–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞:* " + ", ".join(escape_markdown(g) for g in value))
            else:
                lines.append(f"*{escape_markdown(key)}:* {escape_markdown(str(value))}")

    food = data.get("Food Pairing")
    if food:
        lines.append("\n*üçΩÔ∏è –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è:*")
        if isinstance(food, list):
            lines.append(str.lower(", ".join(map(escape_markdown, food))))
        else:
            lines.append(str.lower(escape_markdown(food)))

    taste = data.get("Taste Profile")
    if isinstance(taste, dict):
        lines.append("\n*üîé –í–∫—É—Å–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*")
        for axis, desc in taste.items():
            lines.append(str.capitalize(f"_{escape_markdown(axis)}_: {escape_markdown(desc)}"))

    notes = data.get("Notes")
    if isinstance(notes, dict):
        lines.append("\n*üìù –ù–æ—Ç—ã –≤–∏–Ω–∞:*")
        for category, content in notes.items():
            sub_notes_raw = ", ".join(content)
            sub_notes = escape_markdown(sub_notes_raw)
            lines.append(str.capitalize(f"_{escape_markdown(category.title())}_: {sub_notes}"))

    image_url = data.get("Image")
    if image_url:
        lines.append(f"\nüì∑ [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É—Ç—ã–ª–∫—É –≤–∏–Ω–∞](https:{(image_url)})")

    return "\n".join(lines)

    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏


# if __name__ == "__main__":
#     wine_data = parse_wine("Ch√¢teau Margaux", headless=True)
#     translated = format_wine_markdown(wine_data)
#     print(json.dumps(translated, indent=2, ensure_ascii=False))